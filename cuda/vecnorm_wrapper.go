package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3/cuda/cu"
	"sync"
)

// CUDA handle for vecnorm kernel
var vecnorm_code cu.Function

// Stores the arguments for vecnorm kernel invocation
type vecnorm_args_t struct{
	 arg_dst unsafe.Pointer
	 arg_ax unsafe.Pointer
	 arg_ay unsafe.Pointer
	 arg_az unsafe.Pointer
	 arg_N int
	 argptr [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for vecnorm kernel invocation
var vecnorm_args vecnorm_args_t

func init(){
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	 vecnorm_args.argptr[0] = unsafe.Pointer(&vecnorm_args.arg_dst)
	 vecnorm_args.argptr[1] = unsafe.Pointer(&vecnorm_args.arg_ax)
	 vecnorm_args.argptr[2] = unsafe.Pointer(&vecnorm_args.arg_ay)
	 vecnorm_args.argptr[3] = unsafe.Pointer(&vecnorm_args.arg_az)
	 vecnorm_args.argptr[4] = unsafe.Pointer(&vecnorm_args.arg_N)
	 }

// Wrapper for vecnorm CUDA kernel, asynchronous.
func k_vecnorm_async ( dst unsafe.Pointer, ax unsafe.Pointer, ay unsafe.Pointer, az unsafe.Pointer, N int,  cfg *config) {
	if Synchronous{ // debug
		Sync()
	}

	vecnorm_args.Lock()
	defer vecnorm_args.Unlock()

	if vecnorm_code == 0{
		vecnorm_code = fatbinLoad(vecnorm_map, "vecnorm")
	}

	 vecnorm_args.arg_dst = dst
	 vecnorm_args.arg_ax = ax
	 vecnorm_args.arg_ay = ay
	 vecnorm_args.arg_az = az
	 vecnorm_args.arg_N = N
	

	args := vecnorm_args.argptr[:]
	cu.LaunchKernel(vecnorm_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous{ // debug
		Sync()
	}
}

// maps compute capability on PTX code for vecnorm kernel.
var vecnorm_map = map[int]string{ 0: "" ,
20: vecnorm_ptx_20 ,
30: vecnorm_ptx_30 ,
35: vecnorm_ptx_35  }

// vecnorm PTX code for various compute capabilities.
const(
  vecnorm_ptx_20 = `
.version 4.1
.target sm_20
.address_size 64


.visible .entry vecnorm(
	.param .u64 vecnorm_param_0,
	.param .u64 vecnorm_param_1,
	.param .u64 vecnorm_param_2,
	.param .u64 vecnorm_param_3,
	.param .u32 vecnorm_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<9>;
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<14>;


	ld.param.u64 	%rd1, [vecnorm_param_0];
	ld.param.u64 	%rd2, [vecnorm_param_1];
	ld.param.u64 	%rd3, [vecnorm_param_2];
	ld.param.u64 	%rd4, [vecnorm_param_3];
	ld.param.u32 	%r2, [vecnorm_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd5, %rd1;
	cvta.to.global.u64 	%rd6, %rd4;
	cvta.to.global.u64 	%rd7, %rd3;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	add.s64 	%rd11, %rd7, %rd9;
	add.s64 	%rd12, %rd6, %rd9;
	ld.global.f32 	%f1, [%rd10];
	ld.global.f32 	%f2, [%rd11];
	mul.f32 	%f3, %f2, %f2;
	fma.rn.f32 	%f4, %f1, %f1, %f3;
	ld.global.f32 	%f5, [%rd12];
	fma.rn.f32 	%f6, %f5, %f5, %f4;
	sqrt.rn.f32 	%f7, %f6;
	add.s64 	%rd13, %rd5, %rd9;
	st.global.f32 	[%rd13], %f7;

BB0_2:
	ret;
}


`
   vecnorm_ptx_30 = `
.version 4.1
.target sm_30
.address_size 64


.visible .entry vecnorm(
	.param .u64 vecnorm_param_0,
	.param .u64 vecnorm_param_1,
	.param .u64 vecnorm_param_2,
	.param .u64 vecnorm_param_3,
	.param .u32 vecnorm_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<9>;
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<14>;


	ld.param.u64 	%rd1, [vecnorm_param_0];
	ld.param.u64 	%rd2, [vecnorm_param_1];
	ld.param.u64 	%rd3, [vecnorm_param_2];
	ld.param.u64 	%rd4, [vecnorm_param_3];
	ld.param.u32 	%r2, [vecnorm_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd5, %rd1;
	cvta.to.global.u64 	%rd6, %rd4;
	cvta.to.global.u64 	%rd7, %rd3;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	add.s64 	%rd11, %rd7, %rd9;
	add.s64 	%rd12, %rd6, %rd9;
	ld.global.f32 	%f1, [%rd10];
	ld.global.f32 	%f2, [%rd11];
	mul.f32 	%f3, %f2, %f2;
	fma.rn.f32 	%f4, %f1, %f1, %f3;
	ld.global.f32 	%f5, [%rd12];
	fma.rn.f32 	%f6, %f5, %f5, %f4;
	sqrt.rn.f32 	%f7, %f6;
	add.s64 	%rd13, %rd5, %rd9;
	st.global.f32 	[%rd13], %f7;

BB0_2:
	ret;
}


`
   vecnorm_ptx_35 = `
.version 4.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.visible .entry vecnorm(
	.param .u64 vecnorm_param_0,
	.param .u64 vecnorm_param_1,
	.param .u64 vecnorm_param_2,
	.param .u64 vecnorm_param_3,
	.param .u32 vecnorm_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<9>;
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<14>;


	ld.param.u64 	%rd1, [vecnorm_param_0];
	ld.param.u64 	%rd2, [vecnorm_param_1];
	ld.param.u64 	%rd3, [vecnorm_param_2];
	ld.param.u64 	%rd4, [vecnorm_param_3];
	ld.param.u32 	%r2, [vecnorm_param_4];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB5_2;

	cvta.to.global.u64 	%rd5, %rd1;
	cvta.to.global.u64 	%rd6, %rd4;
	cvta.to.global.u64 	%rd7, %rd3;
	cvta.to.global.u64 	%rd8, %rd2;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	add.s64 	%rd11, %rd7, %rd9;
	add.s64 	%rd12, %rd6, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	ld.global.nc.f32 	%f2, [%rd11];
	mul.f32 	%f3, %f2, %f2;
	fma.rn.f32 	%f4, %f1, %f1, %f3;
	ld.global.nc.f32 	%f5, [%rd12];
	fma.rn.f32 	%f6, %f5, %f5, %f4;
	sqrt.rn.f32 	%f7, %f6;
	add.s64 	%rd13, %rd5, %rd9;
	st.global.f32 	[%rd13], %f7;

BB5_2:
	ret;
}


`
 )
