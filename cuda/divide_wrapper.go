package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3/cuda/cu"
	"sync"
)

// CUDA handle for divide kernel
var divide_code cu.Function

// Stores the arguments for divide kernel invocation
type divide_args_t struct{
	 arg_dst unsafe.Pointer
	 arg_a unsafe.Pointer
	 arg_b unsafe.Pointer
	 arg_N int
	 argptr [4]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for divide kernel invocation
var divide_args divide_args_t

func init(){
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	 divide_args.argptr[0] = unsafe.Pointer(&divide_args.arg_dst)
	 divide_args.argptr[1] = unsafe.Pointer(&divide_args.arg_a)
	 divide_args.argptr[2] = unsafe.Pointer(&divide_args.arg_b)
	 divide_args.argptr[3] = unsafe.Pointer(&divide_args.arg_N)
	 }

// Wrapper for divide CUDA kernel, asynchronous.
func k_divide_async ( dst unsafe.Pointer, a unsafe.Pointer, b unsafe.Pointer, N int,  cfg *config) {
	if Synchronous{ // debug
		Sync()
	}

	divide_args.Lock()
	defer divide_args.Unlock()

	if divide_code == 0{
		divide_code = fatbinLoad(divide_map, "divide")
	}

	 divide_args.arg_dst = dst
	 divide_args.arg_a = a
	 divide_args.arg_b = b
	 divide_args.arg_N = N
	

	args := divide_args.argptr[:]
	cu.LaunchKernel(divide_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous{ // debug
		Sync()
	}
}

// maps compute capability on PTX code for divide kernel.
var divide_map = map[int]string{ 0: "" ,
20: divide_ptx_20 ,
30: divide_ptx_30 ,
35: divide_ptx_35  }

// divide PTX code for various compute capabilities.
const(
  divide_ptx_20 = `
.version 4.1
.target sm_20
.address_size 64


.visible .entry divide(
	.param .u64 divide_param_0,
	.param .u64 divide_param_1,
	.param .u64 divide_param_2,
	.param .u32 divide_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<10>;
	.reg .f32 	%f<5>;
	.reg .s64 	%rd<13>;


	ld.param.u64 	%rd4, [divide_param_0];
	ld.param.u64 	%rd5, [divide_param_1];
	ld.param.u64 	%rd6, [divide_param_2];
	ld.param.u32 	%r2, [divide_param_3];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p3, %r1, %r2;
	@%p3 bra 	BB0_7;

	cvta.to.global.u64 	%rd7, %rd6;
	cvta.to.global.u64 	%rd8, %rd5;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f32 	%f1, [%rd10];
	add.s64 	%rd2, %rd7, %rd9;
	setp.neu.f32	%p4, %f1, 0f00000000;
	@%p4 bra 	BB0_3;

	mov.pred 	%p6, -1;
	bra.uni 	BB0_4;

BB0_3:
	ld.global.f32 	%f2, [%rd2];
	setp.eq.f32	%p6, %f2, 0f00000000;

BB0_4:
	cvta.to.global.u64 	%rd11, %rd4;
	shl.b64 	%rd12, %rd1, 2;
	add.s64 	%rd3, %rd11, %rd12;
	@%p6 bra 	BB0_6;

	ld.global.f32 	%f3, [%rd2];
	div.rn.f32 	%f4, %f1, %f3;
	st.global.f32 	[%rd3], %f4;
	bra.uni 	BB0_7;

BB0_6:
	mov.u32 	%r9, 0;
	st.global.u32 	[%rd3], %r9;

BB0_7:
	ret;
}


`
   divide_ptx_30 = `
.version 4.1
.target sm_30
.address_size 64


.visible .entry divide(
	.param .u64 divide_param_0,
	.param .u64 divide_param_1,
	.param .u64 divide_param_2,
	.param .u32 divide_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<10>;
	.reg .f32 	%f<5>;
	.reg .s64 	%rd<13>;


	ld.param.u64 	%rd4, [divide_param_0];
	ld.param.u64 	%rd5, [divide_param_1];
	ld.param.u64 	%rd6, [divide_param_2];
	ld.param.u32 	%r2, [divide_param_3];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p3, %r1, %r2;
	@%p3 bra 	BB0_7;

	cvta.to.global.u64 	%rd7, %rd6;
	cvta.to.global.u64 	%rd8, %rd5;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f32 	%f1, [%rd10];
	add.s64 	%rd2, %rd7, %rd9;
	setp.neu.f32	%p4, %f1, 0f00000000;
	@%p4 bra 	BB0_3;

	mov.pred 	%p6, -1;
	bra.uni 	BB0_4;

BB0_3:
	ld.global.f32 	%f2, [%rd2];
	setp.eq.f32	%p6, %f2, 0f00000000;

BB0_4:
	cvta.to.global.u64 	%rd11, %rd4;
	shl.b64 	%rd12, %rd1, 2;
	add.s64 	%rd3, %rd11, %rd12;
	@%p6 bra 	BB0_6;

	ld.global.f32 	%f3, [%rd2];
	div.rn.f32 	%f4, %f1, %f3;
	st.global.f32 	[%rd3], %f4;
	bra.uni 	BB0_7;

BB0_6:
	mov.u32 	%r9, 0;
	st.global.u32 	[%rd3], %r9;

BB0_7:
	ret;
}


`
   divide_ptx_35 = `
.version 4.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.visible .entry divide(
	.param .u64 divide_param_0,
	.param .u64 divide_param_1,
	.param .u64 divide_param_2,
	.param .u32 divide_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<10>;
	.reg .f32 	%f<5>;
	.reg .s64 	%rd<13>;


	ld.param.u64 	%rd4, [divide_param_0];
	ld.param.u64 	%rd5, [divide_param_1];
	ld.param.u64 	%rd6, [divide_param_2];
	ld.param.u32 	%r2, [divide_param_3];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p3, %r1, %r2;
	@%p3 bra 	BB5_7;

	cvta.to.global.u64 	%rd7, %rd6;
	cvta.to.global.u64 	%rd8, %rd5;
	cvt.s64.s32	%rd1, %r1;
	mul.wide.s32 	%rd9, %r1, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	add.s64 	%rd2, %rd7, %rd9;
	setp.neu.f32	%p4, %f1, 0f00000000;
	@%p4 bra 	BB5_3;

	mov.pred 	%p6, -1;
	bra.uni 	BB5_4;

BB5_3:
	ld.global.nc.f32 	%f2, [%rd2];
	setp.eq.f32	%p6, %f2, 0f00000000;

BB5_4:
	cvta.to.global.u64 	%rd11, %rd4;
	shl.b64 	%rd12, %rd1, 2;
	add.s64 	%rd3, %rd11, %rd12;
	@%p6 bra 	BB5_6;

	ld.global.nc.f32 	%f3, [%rd2];
	div.rn.f32 	%f4, %f1, %f3;
	st.global.f32 	[%rd3], %f4;
	bra.uni 	BB5_7;

BB5_6:
	mov.u32 	%r9, 0;
	st.global.u32 	[%rd3], %r9;

BB5_7:
	ret;
}


`
 )
